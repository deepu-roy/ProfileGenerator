<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Profile PDF Generator</title>
    <link rel="stylesheet" href="/style.css" />
  </head>
  <body>
    <div class="wrap">
      <div class="form-container">
        <h1 class="form-title">Profile PDF Generator</h1>
        <p class="form-subtitle">
          Fill in your details to generate a professional portfolio PDF
        </p>

        <form
          action="/preview"
          method="POST"
          enctype="multipart/form-data"
          id="mainForm"
        >
          <!-- Personal Info Section -->
          <div class="form-section">
            <h2>Personal Information</h2>
            <div class="form-group">
              <label>Name *</label>
              <input
                type="text"
                name="name"
                placeholder="Your Full Name"
                required
              />
            </div>
            <div class="form-group">
              <label>Job Title *</label>
              <input
                type="text"
                name="title"
                placeholder="e.g., Principal Consultant"
                required
              />
            </div>
            <div class="form-group">
              <label>Company</label>
              <input
                type="text"
                name="company"
                placeholder="Your Company Name"
              />
            </div>
            <div class="form-group">
              <label>Profile Summary *</label>
              <textarea
                name="summary"
                rows="4"
                placeholder="Brief professional summary..."
                required
              ></textarea>
            </div>
            <div class="form-group">
              <label>Profile Photo</label>
              <input
                type="file"
                name="photo"
                accept="image/*"
                class="file-input"
              />
            </div>
            <div class="form-group">
              <label>Company Logo 1 (Optional)</label>
              <input
                type="file"
                name="logo1"
                accept="image/*"
                class="file-input"
              />
            </div>
            <div class="form-group">
              <label>Company Logo 2 (Optional)</label>
              <input
                type="file"
                name="logo2"
                accept="image/*"
                class="file-input"
              />
            </div>
          </div>

          <!-- Expertise Chips Section -->
          <div class="form-section">
            <h2>Expertise Areas (Chips)</h2>
            <div id="chipsContainer"></div>
            <button type="button" class="btn-add" onclick="addChip()">
              + Add Expertise
            </button>
          </div>

          <!-- Partnership Section -->
          <div class="form-section">
            <h2>ü§ù Partnership</h2>
            <div class="dynamic-item partnership-item">
              <span class="item-icon">ü§ù</span>
              <input
                type="text"
                name="partnershipTitle"
                placeholder="Partnership Title (e.g., Partnership)"
                value="Partnership"
              />
              <input
                type="number"
                name="partnershipYears"
                placeholder="Years of collaboration (e.g., 3)"
                min="1"
                max="50"
              />
              <input
                type="text"
                name="partnershipCompany"
                placeholder="Partner Company (e.g., SD Worx)"
              />
            </div>
          </div>

          <!-- Projects Section -->
          <div class="form-section">
            <h2>üìã Project Highlights (Up to 5)</h2>
            <div id="projectsContainer"></div>
            <button type="button" class="btn-add" onclick="addProject()">
              + Add Project
            </button>
          </div>

          <!-- Achievements Section -->
          <div class="form-section">
            <h2>üèÜ Key Achievements (Up to 5)</h2>
            <div id="achievementsContainer"></div>
            <button type="button" class="btn-add" onclick="addAchievement()">
              + Add Achievement
            </button>
          </div>

          <!-- Customer Feedback Section -->
          <div class="form-section">
            <h2>üí¨ Customer Feedback (Up to 4)</h2>
            <div id="feedbackContainer"></div>
            <button type="button" class="btn-add" onclick="addFeedback()">
              + Add Feedback
            </button>
          </div>

          <!-- Skills Section -->
          <div class="form-section">
            <h2>Technical Skills (Up to 12)</h2>
            <div id="skillsContainer"></div>
            <button type="button" class="btn-add" onclick="addSkill()">
              + Add Skill
            </button>
          </div>

          <!-- Certifications Section -->
          <div class="form-section">
            <h2>Certifications (Up to 4)</h2>
            <div id="certificationsContainer"></div>
            <button type="button" class="btn-add" onclick="addCertification()">
              + Add Certification
            </button>
          </div>

          <button type="submit" class="btn-submit">Preview Portfolio ‚Üí</button>
        </form>
      </div>
    </div>

    <script>
      let chipCount = 0;
      let projectCount = 0;
      let achievementCount = 0;
      let feedbackCount = 0;
      let skillCount = 0;
      let certCount = 0;

      // Save form data to sessionStorage
      function saveFormData() {
        const formData = new FormData(document.getElementById("mainForm"));
        const data = {};

        // Save all form fields
        for (let [key, value] of formData.entries()) {
          if (data[key]) {
            if (Array.isArray(data[key])) {
              data[key].push(value);
            } else {
              data[key] = [data[key], value];
            }
          } else {
            data[key] = value;
          }
        }

        sessionStorage.setItem("profileFormData", JSON.stringify(data));
      }

      // Auto-save on input changes
      function setupAutoSave() {
        const form = document.getElementById("mainForm");
        form.addEventListener("input", saveFormData);
        form.addEventListener("change", saveFormData);
      }

      function addChip() {
        if (chipCount >= 4) return alert("Maximum 4 expertise areas allowed");
        const container = document.getElementById("chipsContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item";
        div.innerHTML = `
        <input type="text" name="chips[]" placeholder="e.g., Enterprise QA Transformation" required>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); chipCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        chipCount++;
      }

      function addProject() {
        if (projectCount >= 5) return alert("Maximum 5 projects allowed");
        const container = document.getElementById("projectsContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item project-item";
        div.innerHTML = `
        <span class="item-icon">üìã</span>
        <input type="text" name="projectNames[]" placeholder="Project Name" required>
        <textarea name="projectHighlights[]" rows="3" placeholder="Project description/highlights..." required></textarea>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); projectCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        projectCount++;
      }

      function addAchievement() {
        if (achievementCount >= 5)
          return alert("Maximum 5 achievements allowed");
        const container = document.getElementById("achievementsContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item achievement-item";
        div.innerHTML = `
        <span class="item-icon">üèÜ</span>
        <input type="text" name="achievementTitles[]" placeholder="Achievement Title" required>
        <textarea name="achievementDetails[]" rows="2" placeholder="Brief description..." required></textarea>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); achievementCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        achievementCount++;
      }

      function addFeedback() {
        if (feedbackCount >= 4)
          return alert("Maximum 4 customer feedback entries allowed");
        const container = document.getElementById("feedbackContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item feedback-item";
        div.innerHTML = `
        <input type="text" name="feedbackCustomers[]" placeholder="Customer/Client Name" required>
        <input type="text" name="feedbackPositions[]" placeholder="Customer Position/Title" required>
        <textarea name="feedbackComments[]" rows="3" placeholder="Customer feedback/testimonial..." required></textarea>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); feedbackCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        feedbackCount++;
      }

      function addSkill() {
        if (skillCount >= 12) return alert("Maximum 12 skills allowed");
        const container = document.getElementById("skillsContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item";
        div.innerHTML = `
        <input type="text" name="skills[]" placeholder="e.g., Playwright, TypeScript, Docker" required>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); skillCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        skillCount++;
      }

      function addCertification() {
        if (certCount >= 4) return alert("Maximum 4 certifications allowed");
        const container = document.getElementById("certificationsContainer");
        const div = document.createElement("div");
        div.className = "dynamic-item";
        div.innerHTML = `
        <input type="text" name="certNames[]" placeholder="Certification Name" required>
        <input type="text" name="certIssuers[]" placeholder="Issuing Organization" required>
        <button type="button" class="btn-remove" onclick="this.parentElement.remove(); certCount--; saveFormData();">Remove</button>
      `;
        container.appendChild(div);
        certCount++;
      }

      // Restore form data from sessionStorage
      function restoreFormData() {
        const savedData = sessionStorage.getItem("profileFormData");
        if (!savedData) return;

        try {
          const data = JSON.parse(savedData);

          // Restore simple fields
          [
            "name",
            "title",
            "company",
            "summary",
            "partnershipTitle",
            "partnershipYears",
            "partnershipCompany",
          ].forEach((field) => {
            const input = document.querySelector(`[name="${field}"]`);
            if (input && data[field]) {
              input.value = data[field];
            }
          });

          // Restore arrays with dynamic addition
          const arrayFields = {
            "chips[]": {
              container: "chipsContainer",
              addFunc: addChip,
              count: "chipCount",
            },
            "projectNames[]": {
              container: "projectsContainer",
              addFunc: addProject,
              count: "projectCount",
            },
            "achievementTitles[]": {
              container: "achievementsContainer",
              addFunc: addAchievement,
              count: "achievementCount",
            },
            "feedbackCustomers[]": {
              container: "feedbackContainer",
              addFunc: addFeedback,
              count: "feedbackCount",
            },
            "skills[]": {
              container: "skillsContainer",
              addFunc: addSkill,
              count: "skillCount",
            },
            "certNames[]": {
              container: "certificationsContainer",
              addFunc: addCertification,
              count: "certCount",
            },
          };

          Object.keys(arrayFields).forEach((fieldName) => {
            const values = Array.isArray(data[fieldName])
              ? data[fieldName]
              : data[fieldName]
              ? [data[fieldName]]
              : [];
            const config = arrayFields[fieldName];

            // Add additional items if needed
            const currentCount = document.querySelectorAll(
              `[name="${fieldName}"]`
            ).length;
            for (let i = currentCount; i < values.length; i++) {
              config.addFunc();
            }

            // Fill in the values
            const inputs = document.querySelectorAll(`[name="${fieldName}"]`);
            inputs.forEach((input, index) => {
              if (values[index]) input.value = values[index];
            });
          });

          // Restore project highlights
          if (data["projectHighlights[]"]) {
            const highlights = Array.isArray(data["projectHighlights[]"])
              ? data["projectHighlights[]"]
              : [data["projectHighlights[]"]];
            const textareas = document.querySelectorAll(
              '[name="projectHighlights[]"]'
            );
            textareas.forEach((textarea, index) => {
              if (highlights[index]) textarea.value = highlights[index];
            });
          }

          // Restore achievement details
          if (data["achievementDetails[]"]) {
            const details = Array.isArray(data["achievementDetails[]"])
              ? data["achievementDetails[]"]
              : [data["achievementDetails[]"]];
            const textareas = document.querySelectorAll(
              '[name="achievementDetails[]"]'
            );
            textareas.forEach((textarea, index) => {
              if (details[index]) textarea.value = details[index];
            });
          }

          // Restore feedback positions and comments
          if (data["feedbackPositions[]"]) {
            const positions = Array.isArray(data["feedbackPositions[]"])
              ? data["feedbackPositions[]"]
              : [data["feedbackPositions[]"]];
            const inputs = document.querySelectorAll(
              '[name="feedbackPositions[]"]'
            );
            inputs.forEach((input, index) => {
              if (positions[index]) input.value = positions[index];
            });
          }

          if (data["feedbackComments[]"]) {
            const comments = Array.isArray(data["feedbackComments[]"])
              ? data["feedbackComments[]"]
              : [data["feedbackComments[]"]];
            const textareas = document.querySelectorAll(
              '[name="feedbackComments[]"]'
            );
            textareas.forEach((textarea, index) => {
              if (comments[index]) textarea.value = comments[index];
            });
          }

          // Restore certification issuers
          if (data["certIssuers[]"]) {
            const issuers = Array.isArray(data["certIssuers[]"])
              ? data["certIssuers[]"]
              : [data["certIssuers[]"]];
            const inputs = document.querySelectorAll('[name="certIssuers[]"]');
            inputs.forEach((input, index) => {
              if (issuers[index]) input.value = issuers[index];
            });
          }

          console.log("‚úÖ Form data restored from previous session");
        } catch (e) {
          console.error("Error restoring form data:", e);
        }
      }

      // Initialize form
      function initForm() {
        // Add initial items first
        addChip();
        addProject();
        addAchievement();
        addFeedback();
        addSkill();
        addCertification();

        // Then restore saved data
        restoreFormData();

        // Setup auto-save
        setupAutoSave();

        // Add clear button functionality
        const clearBtn = document.createElement("button");
        clearBtn.type = "button";
        clearBtn.className = "btn-edit";
        clearBtn.textContent = "üóëÔ∏è Clear Form Data";
        clearBtn.style.marginLeft = "12px";
        clearBtn.onclick = () => {
          if (confirm("Are you sure you want to clear all saved form data?")) {
            sessionStorage.removeItem("profileFormData");
            location.reload();
          }
        };
        document
          .querySelector(".btn-submit")
          .parentElement.appendChild(clearBtn);
      }

      // Run initialization when DOM is ready
      if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initForm);
      } else {
        initForm();
      }
    </script>
  </body>
</html>
